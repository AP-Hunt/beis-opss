- content_for :page_title, "Your cosmetic products"
- content_for :after_header do
  = render "layouts/navbar"
- if @pending_notification_files_count.positive?
  .govuk-grid-row
    .govuk-grid-column-full
      .govuk-error-summary.loading-spinner__container
        h2.govuk-error-summary__title
          span.loading-spinner__dot
          ' Checking
          = pluralize(@pending_notification_files_count, 'notification file')
        .govuk-error-summary__body
          = link_to "Refresh the browser to see uploaded products", url_for, class: "govuk-link--no-visited-state"
.govuk-grid-row
  .govuk-grid-column-two-thirds
    h1.govuk-heading-xl
      | Your cosmetic products

    - if @registered_notifications.total_entries.zero?
      p
        b => @responsible_person.name
        | has not submitted any cosmetic product notifications in the UK.
      p
        | All cosmetic products sold or given away in the UK must be notified in the UK.
      p
        | To continue to sell or give away cosmetic products that were notified to the European Union (EU) before
        span.no-wrap
          =< display_full_month_date BREXIT_DATE
          ' ,
        | you must submit your product notifications in the UK within 90 days of the UK leaving the EU â€“ that is by
        span.no-wrap
          =<> display_time(BREXIT_DATE + 90)
          | on
          =< display_full_month_date(BREXIT_DATE + 90)
          | .
      p
        | You do not have to submit notifications for cosmetic products discontinued before
        span.no-wrap
          =< display_full_month_date BREXIT_DATE
          | .

    = link_to "Add cosmetic products", new_responsible_person_add_notification_path(@responsible_person),
            class: "govuk-button govuk-button", role: "button"

= render "components/tabs", tabs: [\
  Tab.new("errors", "Errors (#{@erroneous_notification_files.total_entries})", "Upload errors",
        lambda { render "responsible_persons/notifications/tabs/errors" }),
  Tab.new("unfinished", "Incomplete (#{@unfinished_notifications.total_entries})", "Incomplete notifications",
        lambda { render "responsible_persons/notifications/tabs/unfinished" }),
  Tab.new("notified", "Notified (#{@registered_notifications.total_entries})", "Notified cosmetic products",
        lambda { render "responsible_persons/notifications/tabs/registered" })\
]
